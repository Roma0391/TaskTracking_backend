// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
  
model Profile {
  id                    String   @id @default(cuid())
  userId                String   
  firstName             String
  lastName              String
  email                 String   
  role                  String   @default("user")
  permisionStatus       String
  createdById           String
  createdProjects       Project[]
  projectId             String?
  project               Project? @relation(name: "ProjectToMembers", fields: [projectId], references: [id], onDelete: Cascade)
  tasks                 Task[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Candidate {
  id                    String   @id @default(cuid())
  userId                String   
  firstName             String
  lastName              String
  email                 String   
  createdById           String
  projectId             String
  project               Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Project {
  id                    String   @id @default(cuid()) 
  name                  String  @unique
  description           String
  createdById           String 
  createdBy             Profile  @relation(fields: [createdById], references: [id])
  members               Profile[] @relation(name: "ProjectToMembers")
  candidates            Candidate[]
  // candidates            String[] 
  tasks                 Task[]
  status                String 
  priorityLevel         String   
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Task {
  id                    String   @id @default(cuid())
  title                 String  @unique
  description           String?
  projectId             String
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deadline              DateTime
  toDoProfileId         String?
  toDoProfile           Profile? @relation( fields: [toDoProfileId], references: [id], onDelete: SetNull)
  subTasks              Task[] @relation("SubTasks")
  parentTaskId          String? 
  parentTask            Task?    @relation(name: "SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  progress              Int      @default(0)
  status                String 
  priorityLevel         String 
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt 
  @@index([projectId])
}
